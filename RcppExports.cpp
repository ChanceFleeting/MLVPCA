// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// MultilevelS_c
Rcpp::List MultilevelS_c(arma::mat Y, int L1, int L2, Rcpp::List option);
RcppExport SEXP _LVPCA_MultilevelS_c(SEXP YSEXP, SEXP L1SEXP, SEXP L2SEXP, SEXP optionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< int >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type option(optionSEXP);
    rcpp_result_gen = Rcpp::wrap(MultilevelS_c(Y, L1, L2, option));
    return rcpp_result_gen;
END_RCPP
}
// deflate_c
arma::mat deflate_c(arma::mat S, Rcpp::Nullable<Rcpp::NumericMatrix> PrevPi);
RcppExport SEXP _LVPCA_deflate_c(SEXP SSEXP, SEXP PrevPiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type PrevPi(PrevPiSEXP);
    rcpp_result_gen = Rcpp::wrap(deflate_c(S, PrevPi));
    return rcpp_result_gen;
END_RCPP
}
// GetTheta_c
double GetTheta_c(arma::vec v, int ndim);
RcppExport SEXP _LVPCA_GetTheta_c(SEXP vSEXP, SEXP ndimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type ndim(ndimSEXP);
    rcpp_result_gen = Rcpp::wrap(GetTheta_c(v, ndim));
    return rcpp_result_gen;
END_RCPP
}
// FantopeProj_c
arma::mat FantopeProj_c(arma::mat mat1, int ndim, int d, Rcpp::Nullable<Rcpp::NumericMatrix> mat0);
RcppExport SEXP _LVPCA_FantopeProj_c(SEXP mat1SEXP, SEXP ndimSEXP, SEXP dSEXP, SEXP mat0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type mat0(mat0SEXP);
    rcpp_result_gen = Rcpp::wrap(FantopeProj_c(mat1, ndim, d, mat0));
    return rcpp_result_gen;
END_RCPP
}
// SoftThreshold_c
arma::mat SoftThreshold_c(arma::mat x, double lambda);
RcppExport SEXP _LVPCA_SoftThreshold_c(SEXP xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(SoftThreshold_c(x, lambda));
    return rcpp_result_gen;
END_RCPP
}
// seqADMM_c
arma::mat seqADMM_c(arma::mat S, int ndim, int PrevPi_d, double alpha, double lambda, Rcpp::List option, Rcpp::Nullable<Rcpp::NumericMatrix> PrevPi, bool verbose);
RcppExport SEXP _LVPCA_seqADMM_c(SEXP SSEXP, SEXP ndimSEXP, SEXP PrevPi_dSEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP optionSEXP, SEXP PrevPiSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< int >::type PrevPi_d(PrevPi_dSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type option(optionSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type PrevPi(PrevPiSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(seqADMM_c(S, ndim, PrevPi_d, alpha, lambda, option, PrevPi, verbose));
    return rcpp_result_gen;
END_RCPP
}
// CV_Gamma_c
Rcpp::List CV_Gamma_c(arma::mat X, Rcpp::List option);
RcppExport SEXP _LVPCA_CV_Gamma_c(SEXP XSEXP, SEXP optionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type option(optionSEXP);
    rcpp_result_gen = Rcpp::wrap(CV_Gamma_c(X, option));
    return rcpp_result_gen;
END_RCPP
}
// CV_AlphaLambda_c
Rcpp::List CV_AlphaLambda_c(arma::mat x_c, arma::vec alphaSeq_w, arma::vec lambdaSeq_w, arma::vec alphaSeq_z, arma::vec lambdaSeq_z, int Fantope_d, int PrevPi_d, Rcpp::List option, Rcpp::Nullable<Rcpp::NumericMatrix> PrevPi_w, Rcpp::Nullable<Rcpp::NumericMatrix> PrevPi_z);
RcppExport SEXP _LVPCA_CV_AlphaLambda_c(SEXP x_cSEXP, SEXP alphaSeq_wSEXP, SEXP lambdaSeq_wSEXP, SEXP alphaSeq_zSEXP, SEXP lambdaSeq_zSEXP, SEXP Fantope_dSEXP, SEXP PrevPi_dSEXP, SEXP optionSEXP, SEXP PrevPi_wSEXP, SEXP PrevPi_zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x_c(x_cSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alphaSeq_w(alphaSeq_wSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambdaSeq_w(lambdaSeq_wSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alphaSeq_z(alphaSeq_zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambdaSeq_z(lambdaSeq_zSEXP);
    Rcpp::traits::input_parameter< int >::type Fantope_d(Fantope_dSEXP);
    Rcpp::traits::input_parameter< int >::type PrevPi_d(PrevPi_dSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type option(optionSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type PrevPi_w(PrevPi_wSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type PrevPi_z(PrevPi_zSEXP);
    rcpp_result_gen = Rcpp::wrap(CV_AlphaLambda_c(x_c, alphaSeq_w, lambdaSeq_w, alphaSeq_z, lambdaSeq_z, Fantope_d, PrevPi_d, option, PrevPi_w, PrevPi_z));
    return rcpp_result_gen;
END_RCPP
}
// FVE_AlphaLambda_c
Rcpp::List FVE_AlphaLambda_c(arma::mat K, arma::mat G, arma::vec alphaSeq, arma::vec lambdaSeq, double totV, int Fantope_d, int PrevPi_d, Rcpp::List option, std::string select, Rcpp::Nullable<Rcpp::NumericMatrix> PrevPi);
RcppExport SEXP _LVPCA_FVE_AlphaLambda_c(SEXP KSEXP, SEXP GSEXP, SEXP alphaSeqSEXP, SEXP lambdaSeqSEXP, SEXP totVSEXP, SEXP Fantope_dSEXP, SEXP PrevPi_dSEXP, SEXP optionSEXP, SEXP selectSEXP, SEXP PrevPiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alphaSeq(alphaSeqSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambdaSeq(lambdaSeqSEXP);
    Rcpp::traits::input_parameter< double >::type totV(totVSEXP);
    Rcpp::traits::input_parameter< int >::type Fantope_d(Fantope_dSEXP);
    Rcpp::traits::input_parameter< int >::type PrevPi_d(PrevPi_dSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type option(optionSEXP);
    Rcpp::traits::input_parameter< std::string >::type select(selectSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type PrevPi(PrevPiSEXP);
    rcpp_result_gen = Rcpp::wrap(FVE_AlphaLambda_c(K, G, alphaSeq, lambdaSeq, totV, Fantope_d, PrevPi_d, option, select, PrevPi));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LVPCA_MultilevelS_c", (DL_FUNC) &_LVPCA_MultilevelS_c, 4},
    {"_LVPCA_deflate_c", (DL_FUNC) &_LVPCA_deflate_c, 2},
    {"_LVPCA_GetTheta_c", (DL_FUNC) &_LVPCA_GetTheta_c, 2},
    {"_LVPCA_FantopeProj_c", (DL_FUNC) &_LVPCA_FantopeProj_c, 4},
    {"_LVPCA_SoftThreshold_c", (DL_FUNC) &_LVPCA_SoftThreshold_c, 2},
    {"_LVPCA_seqADMM_c", (DL_FUNC) &_LVPCA_seqADMM_c, 8},
    {"_LVPCA_CV_Gamma_c", (DL_FUNC) &_LVPCA_CV_Gamma_c, 2},
    {"_LVPCA_CV_AlphaLambda_c", (DL_FUNC) &_LVPCA_CV_AlphaLambda_c, 10},
    {"_LVPCA_FVE_AlphaLambda_c", (DL_FUNC) &_LVPCA_FVE_AlphaLambda_c, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_LVPCA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
